# -*- coding: utf-8 -*-
"""Data Visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BQA8mpdfCxxkNTmveryvyYISDCVEGw20

# CSC 522
## HW 1
## H21
## Karan Gala
## Sahil Sawant
## Akhil Namboodiri

# Converting Text Data File into CSV file
"""

with open('/content/drive/MyDrive/Colab Notebooks/seeds_dataset.txt') as f:
    lines = f.readlines()

header = ['Area','Perimeter','Compactness','Length of kernel','Width of kernel','Asymmetry coefficient','Length of kernel groove',"Output"]
data = []
for line in lines:
  temp = line.split("\t")
  if "" in temp:
    temp1 = [i for i in temp if i != ""]
    temp = temp1
  temp[7] = temp[7][0]
  data.append(temp)

import pandas as pd
df = pd.DataFrame(data)
df.columns = header
print("DataFrame",df)

df.to_csv('/content/drive/MyDrive/Colab Notebooks/seedsData.csv')

"""# Compute the mean, median, standard deviation, range, 25th percentiles, 50th percentiles, 75th percentiles for the following attributes: area, perimeter, length of kernel, width of kernel."""

df = df.astype(float)
df["Output"] = df["Output"].astype(int)
descDF = df[["Area","Perimeter","Length of kernel","Width of kernel"]].describe()
print("mean,median,standard deviation,25th,50th,75th percentiles for the required attributes are:\n",descDF)
print("Range for Area:\t\t\t",descDF["Area"]["max"] - descDF["Area"]["min"])
print("Range for Perimeter:\t\t",descDF["Perimeter"]["max"] - descDF["Perimeter"]["min"])
print("Range for Length of kernel:\t",descDF["Length of kernel"]["max"] - descDF["Length of kernel"]["min"])
print("Range for Width of kernel:\t",descDF["Width of kernel"]["max"] - descDF["Width of kernel"]["min"])

"""# Make a box-and-whisker plot for the attributes length of kernel and width of kernel where they are grouped by the class label. Be sure to include a title for each plot of what feature is being described"""

import matplotlib.pyplot as plt
import seaborn as sns

df.boxplot(by ='Output', column =['Length of kernel','Width of kernel'], grid = False, figsize = (20,10))

plt.figure(figsize =(10, 7))
plt.boxplot([df['Length of kernel'],df['Width of kernel']])
plt.xticks([1,2],["Length of kernel","Width of kernel"])
plt.title("Box plot for Length of kernel and Width of kernel", loc="center")
plt.show()

"""## Box plot depicts 25th, 50th, 75th percentile, max and min values"""

plt.figure(figsize =(6, 4))
plt.boxplot(df['Length of kernel'])
plt.title("Box plot for Length of kernel", loc="center")
plt.show()

plt.figure(figsize =(6, 4))
plt.boxplot(df['Width of kernel'])
plt.title("Box plot for Width of kernel", loc="center")
plt.show()

"""# Create histogram plot using 16 bins for the two features asymmetry coefficient and compactness, respectively."""

plt.figure(figsize =(10, 7))
plt.hist([df['Asymmetry coefficient'],df['Compactness']],bins=16)
plt.title
plt.show()

print("Unique values in the compactness column",df['Compactness'].unique())

"""## Since most of the values in the compactness column are more or less similar, we see only one sinlge bin rather than 16 bins when we try to plot the two features together"""

plt.figure(figsize =(10, 7))
plt.hist(df['Compactness'],bins=16)
plt.title("Histogram for the feature Compactness")
plt.show()

plt.figure(figsize =(10, 7))
plt.hist(df['Asymmetry coefficient'],bins=16)
plt.title("Histogram for the feature Asymmetry coefficient")
plt.show()

"""# Create a scatter matrix of the data. Include only the following features: area, compactness, length of kernel, width of kernel attribute to change the color of the data points (for convenience, you may use a library for this). For the diagonal of the scatter matrix, plot the kernel density estimation (KDE)."""

sns.pairplot(df.drop(['Perimeter','Asymmetry coefficient',	'Length of kernel groove',	'Output'],axis=1),diag_kind='kde')

sns.pairplot(df.drop(['Perimeter','Asymmetry coefficient',	'Length of kernel groove'],axis=1),diag_kind='kde',hue = "Output",palette="coolwarm")

"""## The first scatter matrix plot excludes output class(0/1/2), hence we can't have a color palette to differentiate between the classes of the rows. The second scatter matrix has a hue class: output and we can observe the clusters with different colors formed in the pairplot

# Now, write code to produce a three-dimensional scatter plot using the length of kernel, width of kernel and area as dimensions, and color the data points according to the class attribute.
"""

import plotly.express as px
fig = px.scatter_3d(df, x='Area', y='Length of kernel', z='Width of kernel', color='Output')
fig.show()

"""# The quantile-quantile plot can be used for comparing the distribution of data against the normal distribution. Create a quantile-quantile plot for the two features length of kernel groove and compactness, respectively. Give a brief analysis for the two plots."""

import pylab 
import scipy.stats as stats

stats.probplot(df['Length of kernel groove'], dist="norm", plot=pylab)
pylab.show()

stats.probplot(df['Compactness'], dist="norm", plot=pylab)
pylab.show()

import statsmodels.api as sm
sm.qqplot(df['Length of kernel groove'], line='45')
pylab.show()

sm.qqplot(df['Compactness'], line='45')
pylab.show()

"""## Plot 1, 3 are for the feature: Length of kernel groove, plot 2, 4 are for the feature Comapctness. 
### Plots 1,2 have their origin shifted to another point and the scale on X and Y axis are different (say 1 cm != 1 unit on both axis), Hence we can see all the points in a closer proximity to the reference line (angle != 45 degrees)
### However plots 3,4 have the standard origin (0,0) and reference line angle of 45 degrees

## Many points can be seen not coinciding with the reference line in the figure 1 and 2 hence we can say that the two features are not normally distributed. Distribution of Length of kernel groove is bimodal and that of Compactness is left skewed.
"""

df['Compactness'].mean(),df['Compactness'].median(),df['Compactness'].mode()

df['Compactness'].hist()

df['Length of kernel groove'].mean(),df['Length of kernel groove'].median(),df['Length of kernel groove'].mode()

df['Length of kernel groove'].hist()

"""### We observe that the histograms don't follow the curve for a noraml distribution"""

